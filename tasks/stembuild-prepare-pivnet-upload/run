#!/usr/bin/env bash

set -euo pipefail

function base_metadata() {
  echo '{"release":{"release_type":"Security Release","eula_slug":"pivotal_beta_eula","availability":"Selected User Groups Only","eccn":"5D002","license_exception":"ECCN","user_group_ids":["164"]},"product_files":[],"file_groups":[]}'
}

function add-product-file() {
  local filePath="$1"
  local fileName="$2"
  local jsonMetadata="$3"

  echo "${jsonMetadata}" | jq -c ".product_files |= . + [{\"file\":\"${filePath}\", \"upload_as\":\"${fileName}\"}]"
}

function add-stembuild-folder() {
  local stembuildOs="$1"
  local json_metadata="$2"

  echo "${json_metadata}" | jq -c ". + {\"file_groups\":[{\"name\":\"vSphere Stembuild CLI for ${stembuildOs}\", \"product_files\": []}]}"
}

function copy-pattern() {
  local source_dir="${1?copy-pattern: Argument 1 should be source directory}"
  local target_dir="${2?copy-pattern: Argument 2 should be target directory}"
  local pattern="${3?copy-pattern: Argument 3 should be file pattern}"

  set +e
  ls_output="$(ls "${source_dir}/${pattern}")"
  ls_result=$?
  set -e

  if [ "${ls_result}" -eq "0" ]; then
    echo "Files to be copied: ${ls_output}"

    cp "${source_dir}/${pattern} ${target_dir}"
  else
    echo "No files to be copied"
  fi
}

function copy-stembuild-binaries() {
  local source_dir="${1?copy-stembuild-binaries Argument 1 should be source directory}"
  local target_dir="${2?copy-stembuild-binaries Argument 2 should be target directory}"

  echo "Copying Stembuild Executables from ${source_dir} to ${target_dir}"
  copy-pattern "${source_dir}" ${target_dir} "stembuild*"
}

function copy-stemcells() {
  local source_dir="${1?copy-stemcells Argument 1 should be source directory}"
  local target_dir="${2?copy-stemcells Argument 2 should be target directory}"

  echo "Copying Stemcells from ${source_dir} to ${target_dir}"

  copy-pattern "${source_dir}" ${target_dir} "*stemcell*"
}

#Convert the JSON file to YAML. This is a confusing/annoying issue, refer to story notes for a detailed explanation
json_metadata=$(yq read -j pivnet-release/metadata.yaml)

existing_release_version=$(echo "${json_metadata}" | jq -r .release.version)
release_version=$( cat version/version | cut -d '.' -f1-2 )

echo "Releasing draft stembuild ${release_version}"

if [[ $existing_release_version == *"${release_version}"* ]]; then
  echo "Pivnet Release ${release_version} exists, will retain existing release files"

  echo "${json_metadata}" | jq -r '.product_files[].aws_object_key' | \
    xargs -I% basename % | \
    xargs -I% mv "pivnet-release/%" "pivnet-metadata/"

else
  echo "Creating Pivnet Release ${release_version} for first time"

  json_metadata=$(base_metadata | jq -c --arg version "${release_version}" '(.release.version=$version)')
fi

json_metadata=$(add-stembuild-folder ${OS_NAME} "${json_metadata}")

bin_dirs=( stembuild-untested-windows stembuild-untested-linux )
for DIR in "${bin_dirs[@]}"
do
    PLATFORM=$( echo ${DIR} | cut -d '-' -f3 )
    echo "*** Setting release version of ${PLATFORM} Stembuild to ${release_version} ***"
    SOURCE_BINARY=$( find ${DIR} -name stembuild-\* -type f -exec basename {} \;)
    DEST_BINARY=$( echo ${SOURCE_BINARY} | sed -r 's/[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/'${release_version}'/g' )
    cp ${DIR}/${SOURCE_BINARY} pivnet-metadata/${DEST_BINARY}
    json_metadata=$(add-product-file "pivnet-metadata/${DEST_BINARY}" "Stembuild for ${PLATFORM}" "${json_metadata}")
done

#pushd pivnet-metadata
#for s in $(ls stembuild*)
#  do
#    #if $s contains "linux"
#    add-product-file "/pivnet-metadata/$s" ""
#    #if $s contains "windows"
#done
#popd


#Convert the JSON file we've been building back into YAML because I hate myself
echo "${json_metadata}" | yq read - > pivnet-metadata/metadata.yaml

echo 'Release details:'
cat pivnet-metadata/metadata.yaml

#echo
#echo 'stembuilds:'
#ls pivnet-metadata/stembuild*

#cat pivnet-release/metadata.json
#echo
#echo $release_version
#cat version/version
