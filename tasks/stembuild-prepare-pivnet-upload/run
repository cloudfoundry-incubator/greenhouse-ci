#!/usr/bin/env bash

set -euo pipefail

function base_metadata() {
  echo '{"Release":{"ReleaseType":"Security Release","EULASlug":"pivotal_beta_eula","Availability":"Selected User Groups Only","ECCN":"5D002","LicenseException":"ECCN","UserGroupIDs":["164"]},"ProductFiles":[],"FileGroups":[]}'
}

function add-product-file() {
  local filePath="$1"
  local fileName="$2"

  #jq does not support editing contents of a .json file in one line, a temp file is needed. Add -c for compact JSON
  jq -c ".ProductFiles |= . + [{\"file\":\"${filePath}\", \"uploadAs\":\"${fileName}\"}]" pivnet-metadata/metadata > tmp.json
  mv tmp.json pivnet-metadata/metadata
}

function add-stembuild-folder() {
  local stembuildOs="$1"

  jq -c ". + {\"FileGroups\":[{\"Name:\":\"vSphere Stembuild CLI for ${stembuildOs}\", \"ProductFiles\": []}]}" pivnet-metadata/metadata > tmp.json
  mv tmp.json pivnet-metadata/metadata
}

function copy-pattern() {
  local source_dir="${1?copy-pattern: Argument 1 should be source directory}"
  local target_dir="${2?copy-pattern: Argument 2 should be target directory}"
  local pattern="${3?copy-pattern: Argument 3 should be file pattern}"

  set +e
  ls_output="$(ls "${source_dir}/${pattern}")"
  ls_result=$?
  set -e

  if [ "${ls_result}" -eq "0" ]; then
    echo "Files to be copied: ${ls_output}"

    cp "${source_dir}/${pattern} ${target_dir}"
  else
    echo "No files to be copied"
  fi
}

function copy-stembuild-binaries() {
  local source_dir="${1?copy-stembuild-binaries Argument 1 should be source directory}"
  local target_dir="${2?copy-stembuild-binaries Argument 2 should be target directory}"

  echo "Copying Stembuild Executables from ${source_dir} to ${target_dir}"
  copy-pattern "${source_dir}" ${target_dir} "stembuild*"
}

function copy-stemcells() {
  local source_dir="${1?copy-stemcells Argument 1 should be source directory}"
  local target_dir="${2?copy-stemcells Argument 2 should be target directory}"

  echo "Copying Stemcells from ${source_dir} to ${target_dir}"

  copy-pattern "${source_dir}" ${target_dir} "*stemcell*"
}

mv pivnet-release/metadata.json pivnet-metadata/metadata

#existing_release_version=$(cat pivnet-release/metadata.json | jq -r .Release.Version)
#release_version=$( cat version/version | cut -d '.' -f1-2 )
#
#echo "Releasing draft stembuild ${release_version}"
#
#if [[ $existing_release_version == *"${release_version}"* ]]; then
#  echo "Pivnet Release ${release_version} exists, will retain existing release files"
#
#  jq -r '.ProductFiles[].AWSObjectKey' pivnet-release/metadata.json | \
#    xargs -I% basename % | \
#    xargs -I% mv "pivnet-release/%" "pivnet-metadata/"
#
#  cp pivnet-release/metadata.json pivnet-metadata/metadata
#else
#  echo "Creating Pivnet Release ${release_version} for first time"
#
#  base_metadata | jq -c --arg version "${release_version}" '(.Release.Version=$version)' \
#    > pivnet-metadata/metadata
#fi
#
#add-stembuild-folder ${OS_NAME}
#
#bin_dirs=( stembuild-untested-windows stembuild-untested-linux )
#for DIR in "${bin_dirs[@]}"
#do
#    PLATFORM=$( echo ${DIR} | cut -d '-' -f3 )
#    echo "*** Setting release version of ${PLATFORM} Stembuild to ${release_version} ***"
#    SOURCE_BINARY=$( find ${DIR} -name stembuild-\* -type f)
#    SOURCE_BINARY=$(basename ${SOURCE_BINARY})
#    DEST_BINARY=$( echo ${SOURCE_BINARY} | sed -r 's/[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/'${release_version}'/g' )
#    cp ${DIR}/${SOURCE_BINARY} pivnet-metadata/${DEST_BINARY}
#    add-product-file "pivnet-metadata/${DEST_BINARY}" "Stembuild for ${PLATFORM}"
#done
#
#echo "ls ***"
#ls pivnet-release
#
#
##pushd pivnet-metadata
##for s in $(ls stembuild*)
##  do
##    #if $s contains "linux"
##    add-product-file "/pivnet-metadata/$s" ""
##    #if $s contains "windows"
##done
##popd

echo 'Release details:'
cat pivnet-metadata/metadata | jq
echo
#echo 'stembuilds:'
#ls pivnet-metadata/stembuild*

#cat pivnet-release/metadata.json
#echo
#echo $release_version
#cat version/version
