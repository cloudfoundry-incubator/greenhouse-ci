#!/usr/bin/env bash

set -euo pipefail
script_path=$( realpath $0 )
script_dir=$( dirname $script_path )


main_version=$( cat version/number )
uri_filename='bosh-stemcell-*-azure-vhd-uri.txt'
image_url=$( cat azure-base-vhd-uri/${uri_filename} )

echo "********************************************************"
echo "***legacy print-azure-publishing-instructions code,  ***"
echo "***running for a few promotions to compare vhd output***"
echo "********************************************************"

pushd stemcell-builder
  bundle install
  rake publish:staging:azure
popd

echo "*********************************************************"
echo "***END legacy print-azure-publishing-instructions code***"
echo "***           Please do not follow them               ***"
echo "*********************************************************"


vhd_path=$(echo ${image_url} | sed -E 's/^.*(Microsoft\.Compute\/Images\/.*vhd).*$/\1/')

retrieve_blob_url=$(
  az storage blob url \
  --container-name ${AZURE_CONTAINER_NAME} \
  --name ${vhd_path} \
  --account-name ${AZURE_PUBLISHED_STORAGE_ACCOUNT} \
  --account-key ${AZURE_PUBLISHED_STORAGE_ACCESS_KEY}
)

blob_url=$(echo ${retrieve_blob_url}  | sed -E 's/"//g')

iso8601_format='+%Y-%m-%dT%TZ'
yesterday=$(date -u --date="-1 day" $iso8601_format)
in_two_years=$(date -u --date="+2 years" $iso8601_format)

azure_sas=$(
  az storage container generate-sas --name ${AZURE_CONTAINER_NAME} \
  --permissions rl \
  --account-name ${AZURE_PUBLISHED_STORAGE_ACCOUNT} \
  --account-key ${AZURE_PUBLISHED_STORAGE_ACCESS_KEY} \
  --start ${yesterday} --expiry ${in_two_years}
)

sas_params=$(echo ${azure_sas}  | sed -E 's/"//g')
vhd_url="${blob_url}?${sas_params}"

format_version() {
  main_version=$1
  version_regex='([0-9]+)\.([0-9]+)\.([0-9]+)-build\.([0-9]+)'
  version_number_tokens=$(echo $main_version | sed -E  "s/^$version_regex$/\1  \2  \3  \4/")
  echo $version_number_tokens | awk '{ printf("%d.%d.%03d%03d", $1, $2, $3, $4) } '
}

image_version=$(format_version $main_version)
echo "setting image version: $image_version"

tenant_id=${PARTNER_PORTAL_TENANT_ID}
client_id=${PARTNER_PORTAL_CLIENT_ID}
client_secret=${PARTNER_PORTAL_CLIENT_SECRET}
grant_type="client_credentials"
resource="https://cloudpartner.azure.com"

echo
echo -n "authenticating with microsoft..."
microsoft_auth_endpoint="https://login.microsoftonline.com/$tenant_id/oauth2/token"
token=$(curl -X POST $microsoft_auth_endpoint \
  -F "client_id=$client_id"  \
  -F "client_secret=$client_secret"  \
  -F "grant_type=$grant_type"  \
  -F "resource=$resource" | jq -r .access_token
)
echo OK

echo
echo "retrieving current offer details from the Partner Center API..."
original_offer_json="$PWD/original_offer.json"
echo "to debug, 'fly intercept -u <this job run url>' and 'cat $original_offer_json'"
echo
offer_id_endpoint="https://cloudpartner.azure.com/api/publishers/$AZURE_PUBLISHER/offers/$AZURE_OFFER?api-version=2017-10-31"

curl -X GET $offer_id_endpoint \
  -H "Authorization: Bearer $token" \
  -H "Content-Type: application/json" > $original_offer_json
echo OK

echo
echo "adding image version and vhd url to offer json:"
modified_offer_json="$PWD/modified_offer.json"
echo "to debug, 'fly intercept -u <this job run url>' and 'cat $modified_offer_json'"
echo

vm_image_path=".definition.plans[] | select(.planId == \"$AZURE_SKU\") | .[\"microsoft-azure-virtualmachines.vmImages\"]"
new_vm_object="{\"$image_version\": {\"osVhdUrl\":\"$vhd_url\", \"lunVhdDetails\": []}}"
add_image_to_plan="($vm_image_path) |= . + $new_vm_object"
jq "$add_image_to_plan" "$original_offer_json" > "$modified_offer_json"


echo
echo "modifying offer details by PUTting to Partner Center API..."
echo "to debug, 'fly intercept -u <this job run url>' and 'cat endstate.json'"
curl -X PUT -d "@$modified_offer_json" $offer_id_endpoint \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $token" > "endstate.json"
echo OK

