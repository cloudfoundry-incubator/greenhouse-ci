groups:
- name: all
  jobs:
  - bump-stemcell-builder-submodules
  - test-stemcell-builder
  - build
  - create-aws
  - copy-regions-aws
  - test-aws
  - wuts-aws
  - create-azure-stemcell
  - test-azure-stemcell
  - wuts-azure
  - create-gcp-stemcell
  - test-gcp-stemcell
  - wuts-gcp
  - create-vsphere-add-updates
  - create-vsphere-stemcell-from-vmx
  - test-vsphere-stemcell-from-vmx
  - wuts-vsphere
  - create-vsphere-stemcell-from-diff
  - test-vsphere-stemcell-from-diff
  - promote
  - promote-gcp
  - promote-aws
  - promote-vsphere
  - promote-azure
  - print-azure-publishing-instructions
  - ship-bosh-stemcell-builder
- name: vsphere
  jobs:
  - create-vsphere-add-updates
  - create-vsphere-stemcell-from-vmx
  - create-vsphere-stemcell-from-diff
  - test-vsphere-stemcell-from-vmx
  - wuts-vsphere
  - test-vsphere-stemcell-from-diff
- name: aws
  jobs:
  - create-aws
  - copy-regions-aws
  - test-aws
  - wuts-aws
- name: gcp
  jobs:
  - create-gcp-stemcell
  - test-gcp-stemcell
  - wuts-gcp
- name: azure
  jobs:
  - create-azure-stemcell
  - test-azure-stemcell
  - wuts-azure
- name: promote
  jobs:
  - promote
  - promote-gcp
  - promote-aws
  - promote-vsphere
  - promote-azure
  - print-azure-publishing-instructions
  - ship-bosh-stemcell-builder

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
# repos
- name: ci
  type: git
  source:
    branch: ((CI_BRANCH))
    uri: https://github.com/cloudfoundry-incubator/greenhouse-ci.git
- name: bosh-agent
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-agent.git
- name: bwats
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests.git
- name: stemcell-builder-develop
  type: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry-incubator/bosh-windows-stemcell-builder.git
    private_key: ((CLOUDFOUNDRYINCUBATOR_BOSH_WINDOWS_STEMCELL_BUILDER_DEPLOY_KEY))
- name: stemcell-builder
  type: git
  source:
    branch: ((STEMCELL_BUILDER_BRANCH))
    uri: git@github.com:cloudfoundry-incubator/bosh-windows-stemcell-builder.git
    private_key: ((CLOUDFOUNDRYINCUBATOR_BOSH_WINDOWS_STEMCELL_BUILDER_DEPLOY_KEY))
- name: windows-stemcell-dependencies
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal-cf/windows-stemcell-dependencies.git
    private_key: ((PIVOTAL-CF_WINDOWS-STEMCELL-DEPENDENCIES_PRIVATE_KEY))
- name: azstemcell
  type: git
  source:
    branch: master
    uri: https://github.com/pivotal-cf-experimental/azstemcell.git
- name: boshio
  type: git
  source:
    branch: master
    uri: git@github.com:bosh-io/stemcells-windows-index.git
    private_key: ((BOSH_WINDOWS_BOSHIO_DEPLOY_KEY))
- name: windows-utilities-release
  type: git
  source:
    tag_filter: "*"
    uri: https://github.com/cloudfoundry-incubator/windows-utilities-release.git
- name: windows-utilities-tests
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/windows-utilities-tests.git

# github releases
- name: stemcell-builder-release
  type: github-release
  source:
    user: cloudfoundry-incubator
    repository: bosh-windows-stemcell-builder
    access_token: ((GREENHOUSE_CI_ACCESS_TOKEN))
    drafts: true
- name: openssh-release
  type: github-release
  source:
    user: PowerShell
    repository: Win32-OpenSSH
    access_token: ((GREENHOUSE_CI_ACCESS_TOKEN))
- name: stembuild
  type: github-release
  source:
    owner: pivotal-cf-experimental
    repository: stembuild
    pre_release: true
    access_token: ((GREENHOUSE_CI_ACCESS_TOKEN))

# versions
- name: updated-vmx-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/vsphere-updated-vmx
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: "1.0.0"
- name: stemcells-main-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/main
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: 1200.0.0
- name: vsphere-stemcell-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/vsphere
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: 1200.0.0
- name: aws-stemcell-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/aws
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: 1200.0.0
- name: gcp-stemcell-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/gcp
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: 1200.0.0
- name: azure-stemcell-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: 2012R2/versions/azure
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    initial_version: 1200.0.0

# locks
- name: aws-lock
  type: pool
  source:
    branch: master
    pool: ((AWS_LOCK))
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: azure-lock
  type: pool
  source:
    branch: master
    pool: ((AZURE_LOCK))
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: gcp-lock
  type: pool
  source:
    branch: master
    pool: ((GCP_LOCK))
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: vsphere-worker-lock
  type: pool
  source:
    branch: master
    pool: ((VSPHERE_LOCK))
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: vsphere-director-lock
  type: pool
  source:
    branch: master
    pool: vsphere-director-lock
    private_key: ((BOSH-WINDOWS-LOCKS-CI_KEY))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks

# s3 buckets
- name: major-stemcell
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/metadata/stemcell-(.*).json
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: vsphere-stemcell-pre-release-candidate
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/vsphere/diffcell/bosh-stemcell-(.*)-diff-vsphere-esxi-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: vsphere-stemcell-release-candidate
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/vsphere/internal/bosh-stemcell-(.*)-vsphere-esxi-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: vsphere-stemcell-release-candidate-diff
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/vsphere/diffcell/bosh-stemcell-(.*)-vsphere-esxi-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: vsphere-stemcell-final
  type: s3
  source:
   bucket: bosh-windows-stemcells-private
   regexp: bosh-stemcell-(.*)-vsphere-esxi-windows2012R2-go_agent.tgz
   access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
   secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-regional
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent-((AWS_PACKER_REGION)).tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: packer-output-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/packer-output-ami-(.*).txt
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-2012-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-2012-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: aws-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: base-amis-win2012r2
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/aws/inputs/base-amis-windows2012R2-(.*).json
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: base-gcp-image-win2012r2
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/gcp/inputs/base-gcp-image-windows2012R2-(.*).json
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: gcp-2012R2-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/gcp/light-bosh-stemcell-(.*)-google-kvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: gcp-2012R2-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/gcp/light-bosh-stemcell-(.*)-google-kvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: gcp-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: light-bosh-stemcell-(.*)-google-kvm-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: azure-stemcell-pre-release-candidate
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/azure/light-bosh-stemcell-(.*)-azure-hyperv-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: azure-base-vhd-uri
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/untested/azure/inputs/bosh-stemcell-(.*)-azure-vhd-uri.txt
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: azure-stemcell-release-candidate
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: 2012R2/tested/azure/light-bosh-stemcell-(.*)-azure-hyperv-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
- name: azure-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: light-bosh-stemcell-(.*)-azure-hyperv-windows2012R2-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))

#pivnet
- name: pivnet-public-stemcells-release
  type: pivnet
  source:
    api_token: ((PIVNET_BOT_API_TOKEN))
    product_slug: stemcells-windows-server
    access_key_id: ((PIVNET_STEMCELL_WINDOWS_ACCESS_KEY))
    secret_access_key: ((PIVNET_STEMCELL_WINDOWS_SECRET_ACCESS_KEY))
- name: pivnet-internal-stemcells-release
  type: pivnet
  source:
    api_token: ((PIVNET_BOT_API_TOKEN))
    product_slug: stemcells-windows-server-internal
    access_key_id: ((PIVNET_STEMCELL_WINDOWS_ACCESS_KEY))
    secret_access_key: ((PIVNET_STEMCELL_WINDOWS_SECRET_ACCESS_KEY))

jobs:
- name: bump-stemcell-builder-submodules
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder-develop
    - get: bosh-agent
      trigger: true
    - get: bwats
      trigger: true
  - task: bump-submodules
    input_mapping:
      source-repo: stemcell-builder-develop
    output_mapping:
      bumped-repo: stemcell-builder-bumped
    file: ci/bump-submodules/task.yml
  - put: stemcell-builder-develop
    params:
      repository: stemcell-builder-bumped
      rebase: true

- name: test-stemcell-builder
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder-develop
      trigger: true
    - get: stemcell-builder-master
      resource: stemcell-builder
  - aggregate:
    - task: test-stemcell-builder
      file: ci/bosh-windows-stemcell-builder/rspec/task.yml
      input_mapping: {stemcell-builder: stemcell-builder-develop}
    - task: test-bosh-psmodules
      file: ci/bosh-windows-stemcell-builder/bosh-psmodules/task.yml
      input_mapping: {stemcell-builder: stemcell-builder-develop}
  - task: merge-to-master
    input_mapping: { from-repo: stemcell-builder-develop, to-repo: stemcell-builder-master }
    file: ci/merge-repo/task.yml
    params:
      FROM_BRANCH: develop
  - put: stemcell-builder
    params: { repository: merged-repo/to-repo }

- name: create-vsphere-add-updates
  serial: true
  plan:
  - put: vsphere-worker-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: stemcell-builder
      - get: windows-stemcell-dependencies
      - get: vmx-version
        resource: updated-vmx-version
    - task: add-updates
      privileged: true
      input_mapping: { version: vmx-version }
      file: ci/bosh-windows-stemcell-builder/create-vmx-add-updates/task.yml
      tags: [vsphere-windows-worker]
      params:
        OS_VERSION: windows2012R2
        ADMINISTRATOR_PASSWORD: "Password123!"
        AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
        AWS_REGION: us-east-1
        INPUT_BUCKET: "all-bosh-windows/2012R2/untested/vsphere/internal/inputs"
        OUTPUT_BUCKET: "all-bosh-windows/2012R2/untested/vsphere/internal/inputs"
    - put: updated-vmx-version
      params: {bump: major}
    ensure:
      put: vsphere-worker-lock
      params:
        release: vsphere-worker-lock

- name: create-vsphere-stemcell-from-vmx
  serial: true
  plan:
  - put: vsphere-worker-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: windows-stemcell-dependencies
      - get: version
        resource: vsphere-stemcell-version
        passed: [build]
        trigger: true
      - get: vmx-version
        resource: updated-vmx-version
        passed: [build]
      - get: stemcells-main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
        version: { tag: ((OPEN_SSH_VERSION)) }
      - get: stembuild
    - put: version
      resource: vsphere-stemcell-version
      params:
        pre: build
    - task: create-stemcell
      privileged: true
      file: ci/bosh-windows-stemcell-builder/create-vsphere-stemcell-from-vmx/task.yml
      tags: [vsphere-windows-worker]
      params:
        ADMINISTRATOR_PASSWORD: "Password123!"
        NEW_PASSWORD: "Password123!"
        ORGANIZATION: Pivotal
        OWNER: Pivotal
        AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
        AWS_REGION: us-east-1
        INPUT_BUCKET: "((ROOT_BUCKET))/((BASE_FOLDER_NAME))/untested/vsphere/internal/inputs"
        OUTPUT_BUCKET: "((ROOT_BUCKET))/((BASE_FOLDER_NAME))/untested/vsphere/internal"
    ensure:
      put: vsphere-worker-lock
      params:
        release: vsphere-worker-lock

- name: test-vsphere-stemcell-from-vmx
  serial_groups: ["vsphere-director"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder
      passed: [create-vsphere-stemcell-from-vmx]
    - get: version
      resource: vsphere-stemcell-version
      passed: [create-vsphere-stemcell-from-vmx]
      trigger: true
    - get: stemcells-main-version
      passed: [create-vsphere-stemcell-from-vmx]
  - task: bosh-windows-stemcell
    tags: [vsphere-linux-worker]
    params:
      AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
    config:
      platform: linux
      image_resource: {type: docker-image, source: {repository: pivotalgreenhouse/ci}}
      inputs:
        - name: version
      outputs:
        - name: stemcell
      run:
        path: /bin/bash
        args:
          - -c
          - |
            VERSION=$(cat version/number)
            echo "Downloading bosh-stemcell-${VERSION}-vsphere-esxi-windows2012R2-go_agent.tgz"
            aws s3 cp s3://((ROOT_BUCKET))/((BASE_FOLDER_NAME))/untested/vsphere/internal/bosh-stemcell-${VERSION}-vsphere-esxi-windows2012R2-go_agent.tgz stemcell
  - task: test-stemcell
    tags: [vsphere-linux-worker]
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    attempts: 5
    params:
      VM_TYPE: large
      BOSH_CLIENT_SECRET: ((regina_client_secret))
      BOSH_CLIENT: ((regina_client))
      BOSH_TARGET: ((regina_environment))
      BOSH_CA_CERT: ((regina_ca_cert))
      STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-windows2012R2-go_agent.tgz
      STEMCELL_OS: windows2012R2
  - put: vsphere-stemcell-release-candidate
    params:
      file: stemcell/bosh-stemcell-*-vsphere-esxi-windows2012R2-go_agent.tgz

- name: wuts-vsphere
  serial: true
  plan:
  - put: vsphere-director-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests
      - get: bosh-windows-stemcell
        resource: vsphere-stemcell-release-candidate
        passed: [test-vsphere-stemcell-from-vmx]
        trigger: true
      - get: stemcell-builder
        passed: [test-vsphere-stemcell-from-vmx]
      - get: version
        resource: stemcells-main-version
        passed: [test-vsphere-stemcell-from-vmx]
    - task: run-wuts
      tags: [vsphere-linux-worker]
      file: ci/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        BOSH_CLIENT_SECRET: ((regina_client_secret))
        BOSH_CLIENT: ((regina_client))
        BOSH_TARGET: ((regina_environment))
        BOSH_CA_CERT: ((regina_ca_cert))
        BOSH_GW_USER: ((regina_gw_user))
        BOSH_GW_PRIVATE_KEY: ((regina_gw_private_key))
        STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-windows2012R2-go_agent.tgz
        STEMCELL_OS: windows2012R2
        NETWORK: default
        VM_TYPE: default
        AZ: z1
        VM_EXTENSIONS: ""
    ensure:
      put: vsphere-director-lock
      params:
        release: vsphere-director-lock

- name: build
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder
      passed: [test-stemcell-builder]
    - get: windows-stemcell-dependencies
    - get: updated-vmx-version
      passed: [create-vsphere-add-updates]
    - get: version
      resource: stemcells-main-version
      params:
        bump: patch
  - put: stemcells-main-version
    params:
      file: version/number
  - aggregate:
    - put: vsphere-stemcell-version
      params:
        file: version/number
    - put: aws-stemcell-version
      params:
        file: version/number
    - put: gcp-stemcell-version
      params:
        file: version/number
    - put: azure-stemcell-version
      params:
        file: version/number
  - aggregate:
    - task: collect-win2012r2-amis
      file: ci/collect-base-amis/task.yml
      output_mapping: { base-amis: win2012r2-amis }
      params:
        AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_AWS_READ_VPC_EC2_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_AWS_READ_VPC_EC2_SECRET_ACCESS_KEY))
        BASE_AMI: windows2012R2
        BASE_AMI_NAME: ((BASE_AMI_NAME))
    - task: collect-win2012r2-gcp-image
      file: ci/collect-gcp-image/task.yml
      output_mapping: { base-gcp-image: win2012r2-gcp-image }
      params:
        ACCOUNT_JSON: ((CFF-BOSH-WINDOWS-STEMCELLS_ACCOUNT_JSON))
        BASE_OS: windows2012R2
        BASE_IMAGE_REGEX: ((BASE_IMAGE_REGEX))
        IMAGE_FAMILY: ((IMAGE_FAMILY))
  - aggregate:
    - put: base-amis-win2012r2
      params:
        file: win2012r2-amis/base-amis-windows2012R2-*.json
    - put: base-gcp-image-win2012r2
      params:
        file: win2012r2-gcp-image/base-gcp-image-windows2012R2-*.json

- name: create-vsphere-stemcell-from-diff
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: version
      passed: [build]
      resource: vsphere-stemcell-version
      trigger: true
    - get: stemcell-builder
      passed: [build]
    - get: windows-stemcell-dependencies
    - get: stemcells-main-version
      passed: [build]
    - get: sshd
      resource: openssh-release
      version: { tag: ((OPEN_SSH_VERSION)) }
    - get: stembuild
  - put: version
    resource: vsphere-stemcell-version
    params:
      pre: build
  - task: create-stemcell
    privileged: true
    file: ci/bosh-windows-stemcell-builder/create-vsphere-stemcell-from-diff/task.yml
    tags: [diffcell-windows-worker]
    params:
      ADMINISTRATOR_PASSWORD: "Password123!"
      OS_VERSION: windows2012R2
      PRODUCT_KEY: D2N9P-3P6X9-2R39C-7RTCD-MDVJX
      ORGANIZATION: Pivotal
      OWNER: Pivotal
      STEMCELL_DEPS_DIR: ../windows-stemcell-dependencies
      AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))
      AWS_REGION: us-east-1
      VHD_VMDK_BUCKET: "all-bosh-windows/2012R2/untested/vsphere/diffcell/inputs"
      DIFF_OUTPUT_BUCKET: "all-bosh-windows/2012R2/untested/vsphere/diffcell"
      STEMCELL_OUTPUT_BUCKET: "all-bosh-windows/2012R2/untested/vsphere/diffcell"
      CACHE_DIR: "C:\\image-data"

- name: test-vsphere-stemcell-from-diff
  serial_groups: ["vsphere-director"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: bosh-windows-stemcell
      tags: [vsphere-linux-worker]
      resource: vsphere-stemcell-pre-release-candidate
    - get: stemcell-builder
      passed: [create-vsphere-stemcell-from-diff]
    - get: version
      resource: vsphere-stemcell-version
      passed: [create-vsphere-stemcell-from-diff]
      trigger: true
    - get: stemcells-main-version
      passed: [create-vsphere-stemcell-from-diff]
  - task: test-stemcell
    tags: [vsphere-linux-worker]
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    attempts: 5
    params:
      VM_TYPE: large
      BOSH_CLIENT_SECRET: ((regina_client_secret))
      BOSH_CLIENT: ((regina_client))
      BOSH_TARGET: ((regina_environment))
      BOSH_CA_CERT: ((regina_ca_cert))
      STEMCELL_PATH: stemcell/bosh-stemcell-*-diff-vsphere-esxi-windows2012R2-go_agent.tgz
      STEMCELL_OS: windows2012R2
  - put: vsphere-stemcell-release-candidate-diff
    params:
      file: bosh-windows-stemcell/bosh-stemcell-*-diff-vsphere-esxi-windows2012R2-go_agent.tgz

- name: create-aws
  serial: true
  plan:
  - put: aws-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: base-amis
        resource: base-amis-win2012r2
        passed: [build]
      - get: version
        resource: aws-stemcell-version
        passed: [build]
        trigger: true
      - get: windows-stemcell-dependencies
      - get: main-version
        resource: stemcells-main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
        version: { tag: ((OPEN_SSH_VERSION)) }
    - put: version
      resource: aws-stemcell-version
      params:
        pre: build
    - task: create-packer-ci-key
      privileged: true
      config:
        platform: linux
        image_resource: { type: docker-image, source: {repository: pivotalgreenhouse/ci } }
        outputs:
        - name: packer-ci-private-key
        run:
          path: bash
          args:
          - "-c"
          - 'echo "$PACKER_CI" > packer-ci-private-key/key && chmod 600 packer-ci-private-key/key'
        params:
          PACKER_CI: ((PACKER_CI_PRIVATE_KEY))
    - task: create-stemcell
      timeout: 1h30m
      attempts: 3
      file: ci/bosh-windows-stemcell-builder/create-aws-stemcell/task.yml
      params:
        AWS_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
        AWS_REGION: ((BOSH_WINDOWS_AWS_STEMCELLS_REGION))
        AWS_SECRET_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
        PACKER_REGION: ((AWS_PACKER_REGION))
        OS_VERSION: windows2012R2
        OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
    - aggregate:
      - put: aws-regional
        params:
          file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent-((AWS_PACKER_REGION)).tgz
      - put: packer-output-ami
        params:
          file: amis/packer-output-ami-*.txt
    ensure:
      do:
      - task: delete-orphan-vms
        file: ci/delete-vms/task.yml
        params:
          AWS_ACCESS_KEY_ID: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
      - put: aws-lock
        params:
          release: aws-lock


- name: copy-regions-aws
  serial: true
  plan:
  - do:
    - aggregate:
      - get: aws-regional
        passed: [create-aws]
      - get: ci
      - get: stemcell-builder
        passed: [create-aws]
      - get: base-amis
        resource: base-amis-win2012r2
        passed: [create-aws]
      - get: version
        resource: aws-stemcell-version
        passed: [create-aws]
        trigger: true
      - get: main-version
        resource: stemcells-main-version
        passed: [create-aws]
      - get: amis
        resource: packer-output-ami
        passed: [create-aws]
    - task: copy-stemcells
      timeout: 1h30m
      attempts: 3
      file: ci/bosh-windows-stemcell-builder/copy-aws-stemcell/task.yml
      params:
        OS_VERSION: windows2012R2
        AWS_ACCESS_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_ACCESS_KEY_ID))
        AWS_SECRET_KEY: ((BOSH_WINDOWS_AWS_STEMCELLS_SECRET_ACCESS_KEY))
        OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
        REGIONS: "us-east-1,us-west-1,us-west-2,ca-central-1,ap-south-1,ap-northeast-2,ap-southeast-1,ap-southeast-2,ap-northeast-1,eu-central-1,eu-west-1,eu-west-2,sa-east-1"
    - put: aws-2012-untested
      params:
        file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz

- name: test-aws
  serial: true
  plan:
  - aggregate:
    - get: bosh-windows-stemcell
      resource: aws-2012-untested
      passed: [copy-regions-aws]
    - get: ci
    - get: stemcell-builder
      passed: [copy-regions-aws]
    - get: base-amis
      resource: base-amis-win2012r2
      passed: [copy-regions-aws]
    - get: version
      resource: aws-stemcell-version
      passed: [copy-regions-aws]
      trigger: true
    - get: stemcells-main-version
      passed: [copy-regions-aws]
  - task: test-stemcell
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    attempts: 5
    params:
      BOSH_CLIENT_SECRET: ((BOSH_CONCOURSE_BOSH_PASSWORD))
      BOSH_CLIENT: ((BOSH_CONCOURSE_BOSH_USER))
      BOSH_TARGET: ((BOSH_CONCOURSE_DIRECTOR_IP))
      BOSH_CA_CERT: ((BOSH_CONCOURSE_BOSH_TARGET_CERT))
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
      STEMCELL_OS: windows2012R2
  - put: aws-2012-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz

- name: wuts-aws
  serial: true
  plan:
  - put: aws-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests
      - get: stemcell
        resource: aws-2012-tested
        trigger: true
        passed: [test-aws]
      - get: stemcell-builder
        passed: [test-aws]
      - get: version
        resource: stemcells-main-version
        passed: [test-aws]
    - task: run-wuts
      file: ci/run-wuts/task.yml
      params:
        BOSH_CLIENT_SECRET: ((BOSH_CONCOURSE_BOSH_PASSWORD))
        BOSH_CLIENT: ((BOSH_CONCOURSE_BOSH_USER))
        BOSH_TARGET: ((BOSH_CONCOURSE_DIRECTOR_IP))
        BOSH_CA_CERT: ((BOSH_CONCOURSE_BOSH_TARGET_CERT))
        BOSH_GW_USER: ((BOSH_CONCOURSE_GW_USER))
        BOSH_GW_PRIVATE_KEY: ((BOSH_CONCOURSE_GW_PRIVATE_KEY))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
        STEMCELL_OS: windows2012R2
        NETWORK: default
        VM_TYPE: large
        AZ: z1
        VM_EXTENSIONS: ""
    ensure:
      put: aws-lock
      params:
        release: aws-lock


- name: create-gcp-stemcell
  serial: true
  plan:
  - put: gcp-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: base-gcp-image
        resource: base-gcp-image-win2012r2
        passed: [build]
      - get: ci
      - get: sshd
        resource: openssh-release
        version: { tag: ((OPEN_SSH_VERSION)) }
      - get: stemcell-builder
        passed: [build]
      - get: stemcells-main-version
        passed: [build]
      - get: version
        resource: gcp-stemcell-version
        passed: [build]
        trigger: true
      - get: windows-stemcell-dependencies
    - put: version
      resource: gcp-stemcell-version
      params:
        pre: build
    - task: create-stemcell
      file: ci/bosh-windows-stemcell-builder/create-gcp-stemcell/task.yml
      timeout: 60m
      attempts: 10
      params:
        OS_VERSION: windows2012R2
        ACCOUNT_JSON: ((CFF-BOSH-WINDOWS-STEMCELLS_ACCOUNT_JSON))
      ensure:
        task: delete-orphan-vms
        file: ci/delete-vms/task.yml
        params:
          ACCOUNT_JSON: ((CFF-BOSH-WINDOWS-STEMCELLS_ACCOUNT_JSON))
    - task: publish-stemcell
      file: ci/bosh-windows-stemcell-builder/publish-gcp-stemcell/task.yml
      attempts: 1
      params:
        OS_VERSION: windows2012R2
        ACCOUNT_JSON: ((CFF-BOSH-WINDOWS-STEMCELLS_ACCOUNT_JSON))
    - put: gcp-2012R2-untested
      params:
        file: untested-stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
    ensure:
      put: gcp-lock
      params:
        release: gcp-lock

- name: test-gcp-stemcell
  serial: true
  plan:
  - aggregate:
    - get: bosh-windows-stemcell
      resource: gcp-2012R2-untested
      passed: [create-gcp-stemcell]
    - get: ci
    - get: stemcell-builder
      passed: [create-gcp-stemcell]
    - get: version
      resource: gcp-stemcell-version
      passed: [create-gcp-stemcell]
      trigger: true
    - get: windows-stemcell-dependencies
    - get: stemcells-main-version
      passed: [create-gcp-stemcell]
  - task: test-stemcell
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    params:
      IAAS: gcp
      ACCOUNT_JSON: ((CF-GREENHOUSE-GOOSE_ACCOUNT_JSON))
      BOSH_CLIENT_SECRET: ((goose_client_secret))
      BOSH_CLIENT: ((goose_client))
      BOSH_TARGET: ((goose_environment))
      BOSH_CA_CERT: ((goose_ca_cert))
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
      NETWORK: private
      VM_EXTENSIONS: "50GB_ephemeral_disk"
      STEMCELL_OS: windows2012R2
  - put: gcp-2012R2-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz

- name: wuts-gcp
  serial: true
  plan:
  - put: gcp-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests
      - get: bosh-windows-stemcell
        resource: gcp-2012R2-tested
        trigger: true
        passed: [test-gcp-stemcell]
      - get: stemcell-builder
        passed: [test-gcp-stemcell]
      - get: version
        resource: stemcells-main-version
        passed: [test-gcp-stemcell]
    - task: run-wuts
      file: ci/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        BOSH_CLIENT_SECRET: ((mustang_client_secret))
        BOSH_CLIENT: ((mustang_client))
        BOSH_TARGET: ((mustang_environment))
        BOSH_CA_CERT: ((mustang_ca_cert))
        BOSH_GW_USER: ((mustang_gw_user))
        BOSH_GW_PRIVATE_KEY: ((mustang_gw_private_key))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
        STEMCELL_OS: windows2012R2
        NETWORK: default
        VM_TYPE: default
        AZ: z1
        VM_EXTENSIONS: "50GB_ephemeral_disk"
    ensure:
      put: gcp-lock
      params:
        release: gcp-lock

- name: create-azure-stemcell
  serial: true
  plan:
  - put: azure-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: ci
      - get: sshd
        resource: openssh-release
        version: { tag: ((OPEN_SSH_VERSION)) }
      - get: stemcell-builder
        passed: [build]
      - get: stemcells-main-version
        passed: [build]
      - get: version
        resource: azure-stemcell-version
        passed: [build]
        trigger: true
      - get: windows-stemcell-dependencies
    - put: version
      resource: azure-stemcell-version
      params:
        pre: build
    - task: create-stemcell
      file: ci/bosh-windows-stemcell-builder/create-azure-stemcell/task.yml
      params:
        BASE_IMAGE: ((AZURE_BASE_IMAGE))
        BASE_IMAGE_OFFER: ((AZURE_BASE_IMAGE_OFFER))
        CLIENT_ID: ((AZURE_CLIENT_ID))
        CLIENT_SECRET: ((AZURE_CLIENT_SECRET))
        LOCATION: ((AZURE_LOCATION))
        OBJECT_ID: ((AZURE_OBJECT_ID))
        OFFER: ((AZURE_OFFER))
        OS_VERSION: ((AZURE_OS_VERSION))
        PUBLISHER: ((AZURE_PUBLISHER))
        RESOURCE_GROUP_NAME: ((AZURE_RESOURCE_GROUP_NAME))
        SKU: ((AZURE_SKU))
        STORAGE_ACCOUNT: ((AZURE_STORAGE_ACCOUNT))
        SUBSCRIPTION_ID: ((AZURE_SUBSCRIPTION_ID))
        TENANT_ID: ((AZURE_TENANT_ID))
        VM_SIZE: ((AZURE_VM_SIZE))
      ensure:
        task: delete-orphan-vms
        file: ci/delete-vms/task.yml
        params:
          CLIENT_ID: ((AZURE_CLIENT_ID))
          CLIENT_SECRET: ((AZURE_CLIENT_SECRET))
          SUBSCRIPTION_ID: ((AZURE_SUBSCRIPTION_ID))
          TENANT_ID: ((AZURE_TENANT_ID))
    - put: azure-stemcell-pre-release-candidate
      params:
        file: bosh-windows-stemcell/light-bosh-stemcell-*-azure-hyperv-windows2012R2-go_agent.tgz
    - put: azure-base-vhd-uri
      params:
        file: bosh-windows-stemcell/bosh-stemcell-*-azure-vhd-uri.txt
    ensure:
      put: azure-lock
      params:
        release: azure-lock

- name: test-azure-stemcell
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: azstemcell
    - get: stemcell-builder
      passed: [create-azure-stemcell]
    - get: azure-stemcell-version
      passed: [create-azure-stemcell]
      trigger: true
    - get: stemcells-main-version
      passed: [create-azure-stemcell]
    - get: bosh-windows-stemcell
      resource: azure-stemcell-pre-release-candidate
      passed: [create-azure-stemcell]
    - get: azure-base-vhd-uri
      passed: [create-azure-stemcell]
    - get: version
      resource: azure-stemcell-version
      passed: [create-azure-stemcell]
  - task: download-heavy
    file: ci/bosh-windows-stemcell-builder/azure-download-heavy/task.yml
    tags: [azure-linux-worker]
    params:
      AZURE_SOURCE_KEY: ((AZURE_STORAGE_ACCESS_KEY))
      STEMCELL_OS: ((AZURE_OS_VERSION))
      DESTINATION_DIR: heavy-stemcell
  - task: test-stemcell
    attempts: 3
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    input_mapping: {stemcell: heavy-stemcell}
    params:
      AZ: ((AZURE_HEAVY_AZ))
      BOSH_CA_CERT: ((AZURE_HEAVY_BOSH_CA_CERT))
      BOSH_CLIENT: ((AZURE_HEAVY_BOSH_CLIENT))
      BOSH_CLIENT_SECRET: ((AZURE_HEAVY_BOSH_CLIENT_SECRET))
      BOSH_TARGET: ((AZURE_HEAVY_BOSH_TARGET))
      IAAS: azure
      NETWORK: ((AZURE_HEAVY_NETWORK))
      STEMCELL_OS: ((AZURE_OS_VERSION))
      STEMCELL_PATH: stemcell/*.tgz
      VM_TYPE: ((AZURE_HEAVY_VM_TYPE))
  - task: upload-stemcell-to-acceptance
    file: ci/pm-acceptance-upload-azure-stemcell/task.yml
    tags: [azure-linux-worker]
    input_mapping: {heavy_stemcell_dir: heavy-stemcell}
    params:
      BOSH_CA_CERT: ((PM_ACCEPTANCE_BOSH_TARGET_CERT))
      BOSH_CLIENT: ((PM_ACCEPTANCE_BOSH_CLIENT_ID))
      BOSH_CLIENT_SECRET: ((PM_ACCEPTANCE_BOSH_CLIENT_SECRET))
      BOSH_ENVIRONMENT: ((PM_ACCEPTANCE_BOSH_DIRECTOR))
  - put: azure-stemcell-release-candidate
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-azure-hyperv-windows2012R2-go_agent.tgz

- name: wuts-azure
  serial: true
  plan:
  - put: azure-lock
    params:
      acquire: true
  - do:
    - aggregate:
      - get: azstemcell
      - get: ci
      - get: azure-base-vhd-uri
        passed: [test-azure-stemcell]
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests
      - get: bosh-windows-stemcell
        resource: azure-stemcell-release-candidate
        passed: [test-azure-stemcell]
        trigger: true
      - get: azure-stemcell-version
        passed: [test-azure-stemcell]
      - get: stemcell-builder
        passed: [test-azure-stemcell]
      - get: version
        resource: stemcells-main-version
        passed: [test-azure-stemcell]
    - task: download-heavy
      file: ci/bosh-windows-stemcell-builder/azure-download-heavy/task.yml
      tags: [azure-linux-worker]
      params:
        AZURE_SOURCE_KEY: ((KOALA_STORAGE_ACCESS_KEY))
        STEMCELL_OS: windows2012R2
        DESTINATION_DIR: heavy-stemcell
    - task: run-wuts
      attempts: 3
      file: ci/run-wuts/task.yml
      input_mapping: { stemcell: heavy-stemcell }
      params:
        BOSH_CLIENT_SECRET: ((KOALA_BOSH_CLIENT_SECRET))
        BOSH_CLIENT: ((KOALA_BOSH_CLIENT_ID))
        BOSH_TARGET: ((KOALA_BOSH_DIRECTOR_IP))
        BOSH_CA_CERT: ((KOALA_BOSH_TARGET_CERT))
        BOSH_GW_USER: ((KOALA_BOSH_GW_USER))
        BOSH_GW_PRIVATE_KEY: ((KOALA_BOSH_GW_PRIVATE_KEY))
        STEMCELL_PATH: stemcell/*.tgz
        STEMCELL_OS: windows2012R2
        NETWORK: default
        VM_TYPE: default
        AZ: z1
        VM_EXTENSIONS: ""
    ensure:
      put: azure-lock
      params:
        release: azure-lock

- name: promote
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: vsphere-stemcell-release-candidate
      passed: [wuts-vsphere]
    - get: aws-2012-tested
      passed: [wuts-aws]
    - get: gcp-stemcell-release-candidate
      passed: [wuts-gcp]
      resource: gcp-2012R2-tested
    - get: azure-stemcell-release-candidate
      passed: [wuts-azure]
    - get: azure-base-vhd-uri
      passed: [wuts-azure]
    - get: azure-stemcell-version
      passed: [wuts-azure]
    - get: stemcell-builder
      passed: [wuts-gcp,wuts-aws,wuts-vsphere,wuts-azure]
    - get: version
      resource: stemcells-main-version
      passed: [wuts-gcp,wuts-aws,wuts-vsphere,wuts-azure]
  - task: ensure-versions-match
    config:
      platform: linux
      image_resource: {type: docker-image, source: {repository: pivotalgreenhouse/ci}}
      inputs:
        - name: ci
        - name: vsphere-stemcell-release-candidate
        - name: aws-2012-tested
        - name: gcp-stemcell-release-candidate
        - name: azure-stemcell-release-candidate
      run:
        path: ci/match-stemcell-versions/run

- name: promote-aws
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: aws-2012-tested
      passed: [promote]
      trigger: true
    - get: stemcell-builder
      passed: [promote]
    - get: version
      resource: stemcells-main-version
      passed: [promote]
    - get: boshio-input
      resource: boshio
  - get: pivnet-public-stemcells-release
  - task: test-aws-stemcell
    input_mapping: { stemcell: aws-2012-tested }
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    attempts: 5
    params:
      BOSH_CA_CERT: ((BOSH_CONCOURSE_BOSH_TARGET_CERT))
      BOSH_CLIENT: ((BOSH_CONCOURSE_BOSH_USER))
      BOSH_CLIENT_SECRET: ((BOSH_CONCOURSE_BOSH_PASSWORD))
      BOSH_TARGET: ((BOSH_CONCOURSE_DIRECTOR_IP))
      GINKGO_FOCUS: "is fully updated"
      STEMCELL_OS: windows2012R2
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
  - task: aws-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: aws-2012-tested }
    file: ci/set-stemcell-version/task.yml
  - aggregate:
    - task: pivnet-upload
      file: ci/pivnet-upload/task.yml
      input_mapping: { stemcell: final-stemcell, pivnet-release: pivnet-public-stemcells-release }
      params:
        OS_NAME: ((PIVNET_OS_NAME))
    - task: commit-dev-meta4-file
      file: ci/bosh-windows-stemcell-builder/commit-meta4-file/task.yml
      input_mapping: { stemcell: final-stemcell }
      params:
        IAAS: aws
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - aggregate:
    - put: aws-stemcell-final-s3
      resource: aws-stemcell-final
      params:
        file: final-stemcell/light-bosh-stemcell-*-aws-xen-hvm-windows2012R2-go_agent.tgz
    - put: pivnet-public-stemcells-release
      params:
        file_glob: 'pivnet-metadata/*.tgz'
        s3_filepath_prefix: ((PIVNET_STEMCELL_WINDOWS_FILEPATH_PREFIX))
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true

- name: promote-gcp
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: gcp-stemcell-release-candidate
      passed: [promote]
      resource: gcp-2012R2-tested
      trigger: true
    - get: stemcell-builder
      passed: [promote]
    - get: version
      resource: stemcells-main-version
      passed: [promote]
    - get: boshio-input
      resource: boshio
  - get: pivnet-public-stemcells-release
  - task: test-gcp-stemcell
    input_mapping: { stemcell: gcp-stemcell-release-candidate }
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    params:
      ACCOUNT_JSON: ((CF-GREENHOUSE-GOOSE_ACCOUNT_JSON))
      BOSH_CA_CERT: ((goose_ca_cert))
      BOSH_CLIENT: ((goose_client))
      BOSH_CLIENT_SECRET: ((goose_client_secret))
      BOSH_TARGET: ((goose_environment))
      GINKGO_FOCUS: "is fully updated"
      IAAS: gcp
      NETWORK: private
      STEMCELL_OS: windows2012R2
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
      VM_EXTENSIONS: "50GB_ephemeral_disk"
  - task: gcp-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: gcp-stemcell-release-candidate }
    file: ci/set-stemcell-version/task.yml
  - aggregate:
    - task: pivnet-upload
      file: ci/pivnet-upload/task.yml
      input_mapping: { stemcell: final-stemcell, pivnet-release: pivnet-public-stemcells-release }
      params:
        OS_NAME: ((PIVNET_OS_NAME))
    - task: commit-meta4-dev-file
      file: ci/bosh-windows-stemcell-builder/commit-meta4-file/task.yml
      input_mapping: { stemcell: final-stemcell }
      params:
        IAAS: gcp
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - aggregate:
    - put: gcp-stemcell-final-s3
      resource: gcp-stemcell-final
      params:
        file: final-stemcell/light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
    - put: pivnet-public-stemcells-release
      params:
        file_glob: 'pivnet-metadata/*.tgz'
        s3_filepath_prefix: ((PIVNET_STEMCELL_WINDOWS_FILEPATH_PREFIX))
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true

- name: promote-vsphere
  serial_groups: ["vsphere-director"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: vsphere-stemcell-release-candidate
      passed: [promote]
      trigger: true
    - get: stemcell-builder
      passed: [promote]
    - get: version
      resource: stemcells-main-version
      passed: [promote]
    - get: pivnet-internal-stemcells-release
  - task: test-vsphere-stemcell
    input_mapping: { stemcell: vsphere-stemcell-release-candidate }
    tags: [vsphere-linux-worker]
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    attempts: 5
    params:
      BOSH_CA_CERT: ((regina_ca_cert))
      BOSH_CLIENT: ((regina_client))
      BOSH_CLIENT_SECRET: ((regina_client_secret))
      BOSH_TARGET: ((regina_environment))
      GINKGO_FOCUS: "is fully updated"
      STEMCELL_OS: windows2012R2
      STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-windows2012R2-go_agent.tgz
      VM_TYPE: large
  - task: vsphere-set-stemcell-filename-version
    tags: [vsphere-linux-worker]
    input_mapping: { bosh-windows-stemcell: vsphere-stemcell-release-candidate }
    file: ci/set-stemcell-version/task.yml
  - task: pivnet-upload
    file: ci/pivnet-upload/task.yml
    input_mapping: { stemcell: final-stemcell, pivnet-release: pivnet-internal-stemcells-release }
    params:
      OS_NAME: ((PIVNET_OS_NAME))
  - aggregate:
    - put: pivnet-internal-stemcells-release
      params:
        file_glob: 'pivnet-metadata/*.tgz'
        s3_filepath_prefix: ((PIVNET_STEMCELL_WINDOWS_INTERNAL_FILEPATH_PREFIX))
        metadata_file: pivnet-metadata/metadata
    - put: vsphere-stemcell-final-s3
      resource: vsphere-stemcell-final
      params:
        file: final-stemcell/bosh-stemcell-*-vsphere-esxi-windows2012R2-go_agent.tgz


- name: print-azure-publishing-instructions
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder
      passed: [promote]
    - get: version
      resource: azure-stemcell-version
      passed: [promote]
    - get: stemcells-main-version
      passed: [promote]
    - get: azure-stemcell-release-candidate
      passed: [promote]
    - get: azure-base-vhd-uri
      passed: [promote]
  - task: print-azure-publishing-instructions
    file: ci/bosh-windows-stemcell-builder/print-azure-publishing-instructions/task.yml
    params:
      AZURE_CLIENT_ID: ((AZURE_CLIENT_ID))
      AZURE_CLIENT_SECRET: ((AZURE_CLIENT_SECRET))
      AZURE_STORAGE_ACCESS_KEY: ((AZURE_STORAGE_ACCESS_KEY))
      AZURE_STORAGE_ACCOUNT: ((AZURE_STORAGE_ACCOUNT))
      AZURE_TENANT_ID: ((AZURE_TENANT_ID))
      CONTAINER_NAME: ((AZURE_CONTAINER_NAME))
      SKU: ((AZURE_SKU))

- name: promote-azure
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: azure-stemcell-release-candidate
      passed: [print-azure-publishing-instructions]
    - get: version
      resource: stemcells-main-version
      passed: [print-azure-publishing-instructions]
    - get: stemcell-builder
      passed: [print-azure-publishing-instructions]
    - get: boshio-input
      resource: boshio
  - get: pivnet-public-stemcells-release
  - task: test-azure-stemcell
    input_mapping: { stemcell: azure-stemcell-release-candidate }
    file: ci/bosh-windows-stemcell-builder/bwats/task.yml
    params:
      ACCOUNT_JSON:
      AZ: z1
      BOSH_CA_CERT: ((DINGO_BOSH_TARGET_CERT))
      BOSH_CLIENT: ((DINGO_BOSH_CLIENT_ID))
      BOSH_CLIENT_SECRET: ((DINGO_BOSH_CLIENT_SECRET))
      BOSH_TARGET: ((DINGO_BOSH_DIRECTOR_IP))
      IAAS: azure
      NETWORK: default
      STEMCELL_OS: windows2012R2
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-azure-hyperv-windows2012R2-go_agent.tgz
      VM_TYPE: default
  - task: azure-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: azure-stemcell-release-candidate }
    file: ci/set-stemcell-version/task.yml
  - aggregate:
    - task: pivnet-upload
      file: ci/pivnet-upload/task.yml
      input_mapping: { stemcell: final-stemcell, pivnet-release: pivnet-public-stemcells-release }
      params:
        OS_NAME: ((PIVNET_OS_NAME))
    - task: commit-meta4-file
      input_mapping: { stemcell: final-stemcell }
      file: ci/bosh-windows-stemcell-builder/commit-meta4-file/task.yml
      params:
        IAAS: azure
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - aggregate:
    - put: azure-stemcell-final-s3
      resource: azure-stemcell-final
      params:
        file: final-stemcell/light-bosh-stemcell-*-azure-hyperv-windows2012R2-go_agent.tgz
    - put: pivnet-public-stemcells-release
      params:
        file_glob: 'pivnet-metadata/*.tgz'
        s3_filepath_prefix: ((PIVNET_STEMCELL_WINDOWS_FILEPATH_PREFIX))
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true

- name: ship-bosh-stemcell-builder
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: stemcell-builder
      passed: [promote]
    - get: stemcells-main-version
      passed: [promote]
  - task: shorten-stemcell-version
    file: ci/bosh-windows-stemcell-builder/ship-bosh-stemcell-builder/shorten-stemcell-version.yml
  - aggregate:
    - task: build-psmodules-zip
      file: ci/bosh-windows-stemcell-builder/ship-bosh-stemcell-builder/build-psmodules-zip.yml
    - task: build-agent-zip
      file: ci/bosh-windows-stemcell-builder/ship-bosh-stemcell-builder/build-agent-zip.yml
    - task: get-stemcell-builder-sha
      file: ci/bosh-windows-stemcell-builder/ship-bosh-stemcell-builder/get-stemcell-builder-sha.yml
    - task: create-major-stemcell
      file: ci/create-major-stemcell/task.yml
      input_mapping: { version: stemcell-builder-release-version }
  - put: stemcell-builder-release
    params:
      name: stemcell-builder-release-version/version
      tag: stemcell-builder-release-version/version
      commitish: stemcell-builder-commit/sha
      globs:
      - bosh-psmodules/bosh-psmodules.zip
      - bosh-agent/agent.zip
  - put: stemcells-main-version
    params:
      bump: minor
  - put: major-stemcell-s3
    resource: major-stemcell
    params:
      file: stemcell-info/stemcell-*.json
